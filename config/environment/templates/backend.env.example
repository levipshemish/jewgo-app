# Backend Environment Configuration Example
# Copy this file to .env and fill in your actual values

# Flask Configuration
FLASK_ENV=development
FLASK_SECRET_KEY=your-super-secret-production-key-here
FLASK_DEBUG=True

# Environment
ENVIRONMENT=development

# Database Configuration
DATABASE_URL=postgresql://username:password@host:port/database_name

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,https://jewgo.com,https://www.jewgo.com,https://app.jewgo.com,jewgo.app

# Security Configuration
JWT_SECRET_KEY=your-jwt-secret-key-here
SECRET_KEY=your-secret-key-here

# Google API Keys
GOOGLE_PLACES_API_KEY=your-google-places-api-key
GOOGLE_MAPS_API_KEY=your-google-maps-api-key
GOOGLE_KNOWLEDGE_GRAPH_API_KEY=your-google-knowledge-graph-api-key

# Cloudinary Configuration
CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
CLOUDINARY_API_KEY=your-cloudinary-api-key
CLOUDINARY_API_SECRET=your-cloudinary-api-secret
CLOUDINARY_URL=cloudinary://api_key:api_secret@cloud_name

# Sentry Configuration
SENTRY_DSN=your-sentry-dsn-here

# Logging Configuration
LOG_LEVEL=INFO

# Rate Limiting
RATELIMIT_DEFAULT=10000 per day;1000 per hour;100 per minute
RATELIMIT_STORAGE_URL=memory://

# Server Configuration
PORT=8081

# =============================================================================
# ADMIN AUTHENTICATION (PostgreSQL Role-Based)
# =============================================================================
# Admin roles are managed through PostgreSQL user_roles table
# Requires PostgreSQL configuration for JWT validation
# Admin roles managed through PostgreSQL user_roles table

# PostgreSQL Authentication Configuration
JWT_SECRET_KEY=your-jwt-secret-key-here
JWT_ACCESS_EXPIRE_HOURS=24
JWT_REFRESH_EXPIRE_DAYS=30

# Authentication Security Settings
MAX_FAILED_LOGIN_ATTEMPTS=5
ACCOUNT_LOCKOUT_MINUTES=15

# DEPRECATED: Legacy admin authentication (use PostgreSQL roles instead)
# ADMIN_TOKEN=your-admin-token-here
# SUPER_ADMIN_TOKEN=your-super-admin-token-here

# Legacy Authentication Control (Development Only)
ENABLE_LEGACY_ADMIN_AUTH=false
ENABLE_LEGACY_USER_AUTH=false

# Scraper Configuration
SCRAPER_TOKEN=your-scraper-token-here

# Rate Limiting Configuration
SCRAPER_RATE_LIMIT_HOUR=100
ADMIN_RATE_LIMIT_HOUR=50
IP_RATE_LIMIT_HOUR=1000
TOKEN_RATE_LIMIT_HOUR=500

# Allowed IPs (comma-separated)
ALLOWED_IPS=127.0.0.1,::1

# Redis Configuration (optional)
REDIS_URL=redis://localhost:6379

# Feature Flags
FEATURE_FLAGS={}
SPLIT_IO_API_KEY=your-split-io-api-key-here

# Monitoring (optional)
CRONITOR_API_KEY=your-cronitor-api-key-here
UPTIMEROBOT_API_KEY=your-uptimerobot-api-key-here

# API URLs
API_URL=https://jewgo-app-oyoh.onrender.com
FRONTEND_URL=https://jewgo.com

# Test Database (for testing environment)
TEST_DATABASE_URL=sqlite:///:memory:

# Render Configuration
RENDER=false

# Example PostgreSQL URLs for different providers:

# Render
# DATABASE_URL=postgresql://username:password@host.render.com:5432/database_name

# Railway
# DATABASE_URL=postgresql://username:password@host.railway.app:5432/database_name

# api.jewgo.app database
# DATABASE_URL=postgresql://username:password@api.jewgo.app:5432/database_name

# Supabase
# DATABASE_URL=postgresql://postgres:password@host.supabase.co:5432/postgres

# Heroku
# DATABASE_URL=postgresql://username:password@host.compute.amazonaws.com:5432/database_name

# Search System Configuration
SEARCH_MODE=postgresql
SEARCH_CACHE_TTL=3600
