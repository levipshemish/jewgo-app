# Optimized Docker Compose configuration for faster builds
version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.4-alpine
    container_name: jewgo_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jewgo_db}
      POSTGRES_USER: ${POSTGRES_USER:-jewgo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./enable_postgis.sql:/docker-entrypoint-initdb.d/enable_postgis.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jewgo_user} -d ${POSTGRES_DB:-jewgo_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: jewgo_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password_here}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_redis_password_here}", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # Enable BuildKit for better caching
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: jewgo_backend
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_DB: ${POSTGRES_DB:-jewgo_db}
      POSTGRES_USER: ${POSTGRES_USER:-jewgo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
      
      # Redis
      REDIS_URL: ${REDIS_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-your_redis_password_here}
      REDIS_DB: 0
      
      # Application
      NODE_ENV: ${NODE_ENV:-production}
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_APP: app_factory_full:create_app
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_here}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your_jwt_secret_here}
      
      # External APIs
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID: ${NEXT_PUBLIC_GOOGLE_MAPS_MAP_ID}
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      
      # AWS (for backups)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      S3_BACKUP_BUCKET: jewgo-backups1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
