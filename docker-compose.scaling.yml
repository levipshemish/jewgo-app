version: '3.8'

services:
  # JewGo Backend with auto-scaling
  jewgo-backend:
    build: ./backend
    container_name: jewgo-backend-${INSTANCE:-1}
    network_mode: host
    depends_on: []
    env_file:
      - ./.env
    volumes:
      - /home/ubuntu:/host-home
    restart: always
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - INSTANCE_NUMBER=${INSTANCE:-1}
      - WORKER_PROCESSES=2
      - WORKER_CONNECTIONS=1000

  # Load Balancer (Nginx)
  jewgo-loadbalancer:
    image: nginx:alpine
    container_name: jewgo-loadbalancer
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/load_balancer.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - jewgo-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.5'

  # Redis for caching and session storage
  jewgo-redis:
    image: redis:7-alpine
    container_name: jewgo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  # PostgreSQL with read replicas
  jewgo-postgres-primary:
    image: postgres:15
    container_name: jewgo-postgres-primary
    environment:
      POSTGRES_DB: jewgo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD:-replicator_password}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'

  # PostgreSQL Read Replica 1
  jewgo-postgres-replica-1:
    image: postgres:15
    container_name: jewgo-postgres-replica-1
    environment:
      POSTGRES_DB: jewgo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGUSER: postgres
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    command: |
      bash -c "
      until pg_basebackup -h jewgo-postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      postgres -c config_file=/etc/postgresql/postgresql.conf
      "
    depends_on:
      - jewgo-postgres-primary
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # PostgreSQL Read Replica 2
  jewgo-postgres-replica-2:
    image: postgres:15
    container_name: jewgo-postgres-replica-2
    environment:
      POSTGRES_DB: jewgo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGUSER: postgres
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./postgres/postgresql-replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5434:5432"
    command: |
      bash -c "
      until pg_basebackup -h jewgo-postgres-primary -D /var/lib/postgresql/data -U replicator -v -P -W
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      postgres -c config_file=/etc/postgresql/postgresql.conf
      "
    depends_on:
      - jewgo-postgres-primary
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # PgBouncer for connection pooling
  jewgo-pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: jewgo-pgbouncer
    environment:
      DATABASES_HOST: jewgo-postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: postgres
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DATABASES_DBNAME: jewgo
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 5
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 5
      MAX_DB_CONNECTIONS: 0
      MAX_USER_CONNECTIONS: 0
      SERVER_RESET_QUERY: DISCARD ALL
      IGNORE_STARTUP_PARAMETERS: extra_float_digits
    ports:
      - "6432:6432"
    depends_on:
      - jewgo-postgres-primary
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "6432"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'

  # Monitoring and Metrics
  jewgo-prometheus:
    image: prom/prometheus:latest
    container_name: jewgo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  jewgo-grafana:
    image: grafana/grafana:latest
    container_name: jewgo-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SERVER_ROOT_URL=http://141.148.50.111:3001
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'

  # Node Exporter for system metrics
  jewgo-node-exporter:
    image: prom/node-exporter:latest
    container_name: jewgo-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128m
          cpus: '0.1'

volumes:
  postgres_primary_data:
  postgres_replica1_data:
  postgres_replica2_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
