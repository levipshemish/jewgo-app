name: MCP Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  mcp-validation:
    name: MCP Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pnpm mcp:install

      - name: Build MCP servers
        run: pnpm mcp:build

      - name: Run TypeScript strict check
        id: tsc-check
        run: |
          echo "Running TypeScript strict check..."
          cd frontend
          npm run type-check > ../tsc-results.txt 2>&1 || true
          if [ -s ../tsc-results.txt ]; then
            echo '{"ok": false, "issues": ["TypeScript errors found"], "details": "'$(cat ../tsc-results.txt | tr '\n' ' ' | sed 's/"/\\"/g')'"}' > ../tsc-results.json
            echo "❌ TypeScript check failed"
            echo "tsc_status=failure" >> $GITHUB_OUTPUT
            echo "tsc_issues=1" >> $GITHUB_OUTPUT
          else
            echo '{"ok": true, "issues": []}' > ../tsc-results.json
            echo "✅ TypeScript check passed"
            echo "tsc_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Run ESLint check
        id: eslint-check
        run: |
          echo "Running ESLint check..."
          cd frontend
          npm run lint > ../eslint-results.txt 2>&1 || true
          if grep -q "error" ../eslint-results.txt; then
            echo '{"ok": false, "issues": ["ESLint errors found"], "details": "'$(cat ../eslint-results.txt | tr '\n' ' ' | sed 's/"/\\"/g')'"}' > ../eslint-results.json
            echo "❌ ESLint check failed"
            echo "eslint_status=failure" >> $GITHUB_OUTPUT
            echo "eslint_issues=1" >> $GITHUB_OUTPUT
          else
            echo '{"ok": true, "issues": []}' > ../eslint-results.json
            echo "✅ ESLint check passed"
            echo "eslint_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Run CI Guard (if not PR)
        id: ci-guard
        if: github.event_name != 'pull_request'
        run: |
          echo "Running CI Guard..."
          cd frontend
          npm run build > ../ci-guard-results.txt 2>&1 || true
          if grep -q "error" ../ci-guard-results.txt; then
            echo '{"ok": false, "issues": ["Build errors found"], "details": "'$(cat ../ci-guard-results.txt | tr '\n' ' ' | sed 's/"/\\"/g')'"}' > ../ci-guard-results.json
            echo "❌ CI Guard check failed"
            echo "ci_guard_status=failure" >> $GITHUB_OUTPUT
          else
            echo '{"ok": true, "issues": []}' > ../ci-guard-results.json
            echo "✅ CI Guard check passed"
            echo "ci_guard_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Run Schema Drift Check (if database changes)
        id: schema-drift
        if: contains(github.event.head_commit.modified, 'backend/database/') || contains(github.event.head_commit.added, 'backend/database/')
        run: |
          echo "Running Schema Drift check..."
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            cd backend
            python -c "import sys; sys.path.append('.'); from database.models import Base; from sqlalchemy import create_engine, inspect; engine = create_engine('${{ secrets.DATABASE_URL }}'); inspector = inspect(engine); print('{\"ok\": true, \"message\": \"Schema drift check completed\"}')" > ../schema-drift-results.json 2>&1 || echo '{"ok": false, "error": "Schema drift check failed"}' > ../schema-drift-results.json
          else
            echo '{"ok": true, "message": "DATABASE_URL not available, skipping schema drift check"}' > schema-drift-results.json
            echo "⚠️ DATABASE_URL not available, skipping schema drift check"
          fi
          
          # Parse results and set output
          if jq -e '.ok == true' schema-drift-results.json > /dev/null; then
            echo "✅ Schema drift check passed"
            echo "schema_drift_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Schema drift check failed"
            echo "schema_drift_status=failure" >> $GITHUB_OUTPUT
            cat schema-drift-results.json
          fi

      - name: Generate MCP Report
        run: |
          echo "## MCP Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### TypeScript Check: ${{ steps.tsc-check.outputs.tsc_status }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.tsc-check.outputs.tsc_status }}" == "failure" ]; then
            echo "- Issues found: ${{ steps.tsc-check.outputs.tsc_issues }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ESLint Check: ${{ steps.eslint-check.outputs.eslint_status }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.eslint-check.outputs.eslint_status }}" == "failure" ]; then
            echo "- Issues found: ${{ steps.eslint-check.outputs.eslint_issues }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "### CI Guard Check: ${{ steps.ci-guard.outputs.ci_guard_status }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.schema-drift.outputs.schema_drift_status }}" != "" ]; then
            echo "### Schema Drift Check: ${{ steps.schema-drift.outputs.schema_drift_status }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail on MCP errors
        if: |
          steps.tsc-check.outputs.tsc_status == 'failure' ||
          steps.eslint-check.outputs.eslint_status == 'failure' ||
          (github.event_name != 'pull_request' && steps.ci-guard.outputs.ci_guard_status == 'failure') ||
          (steps.schema-drift.outputs.schema_drift_status == 'failure')
        run: |
          echo "❌ MCP validation failed. Please fix the issues above."
          exit 1

      - name: Upload MCP results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-validation-results
          path: |
            tsc-results.json
            eslint-results.json
            ci-guard-results.json
            schema-drift-results.json
          retention-days: 7
