---
alwaysApply: true
---

# Agents Rules & Workflow

Authoritative rules for AI agents contributing to this project. If this file conflicts with `REPOSITORY_GUIDELINES.md`, **agents follow this file**; humans follow the repository guide.

---

## Non-Negotiables
- Prefer reuse; modify existing code first.
- No duplication; when replacing, **delete the old**.
- No stubs or half-work. If not implementing now, link a full plan in `/plans`.
- Minimal edits; smallest viable diff.
- Documentation is mandatory when work completes.
- No timelines, dates, or estimates in any artifact.
- Never run servers, builds, or migrations.
- Replies must follow the **Response Contract** in this file.

---

## Environment Facts
- Dev server is always running (agents do **not** start/stop it).
- Backend API: `https://API.jewgo.app` (Docker on VPS).
- Database: external Postgres (+ PostGIS) on VPS.

---

## Authority & Boundaries

**Agents may**
- Read/modify code within this repo.
- Create/update plans in `/plans` using `REQ_`, `DES_`, `IMP_`.
- Edit `TASKS.md` and `TASK_COMPLETION.md`.

**Agents must not**
- Touch secrets, rotate keys, or alter `.env*`.
- Change CI/CD, Docker, Nginx, servers, or cloud infra without explicit instruction.
- Start servers, run `npm run build`, `python app.py`, `alembic upgrade`, or any shell processes.
- Introduce new services/DBs/queues/external APIs without approved plans.

**Schema & Migrations**
- Require approved REQ/DES/IMP and reversible Alembic migration with clear rollback.
- Add indexes for new filter/sort/query paths.
- Do **not** implement Python haversine; use PostGIS for distance.

**API Changes**
- Update `docs/api/openapi.yaml` (or routes doc) and regenerate/update the typed FE client **in the same PR**.

---

## Secrets & Data Handling
- No secrets/keys/tokens/PII in code, tests, logs, or comments.
- Use env indirection only; do not hardcode secret defaults.
- Redact sensitive data in fixtures/examples and error messages.

---

## Context & Tools
- Use MCP context (Context7, Serena, etc.) to fetch existing files, prior plans, related tasks, and references.
- Verify all file paths returned by tools; **no hallucinated paths**.
- If context is missing, stop and list precisely what’s needed.

---

## Naming & Files
- Plans in `/plans`:
  - `REQ_<feature>.md` — Requirements
  - `DES_<feature>.md` — Design
  - `IMP_<feature>.md` — Implementation
- Prefer `snake_case` filenames where possible.
- This file is `agents.md`.

---

## Planning Workflow

1) **User Request** → add an entry to `TASKS.md` (Status: `open`).  
2) **Planning**
   - `/plans/REQ_<feature>.md` — problem, scope, constraints, acceptance criteria.
   - `/plans/DES_<feature>.md` — architecture, data shapes, API surfaces, risks.
   - `/plans/IMP_<feature>.md` — minimal-diff strategy, files to touch, test plan, rollback (if needed).
3) **Gate to Implementation** (must all be true)
   - REQ has crisp acceptance criteria.
   - DES enumerates affected surfaces (routes, schema, components).
   - IMP lists exact files + rollback plan (for schema/critical paths).
   - `TASKS.md` shows **Status: working** with links to REQ/DES/IMP.

---

## Task Management

**TASKS.md format**
```

* [ ] **Task Name** — short description

  * Status: (open | working)
  * Notes: (context, attempts, references, links to plans)

```

**TASK_COMPLETION.md format**
```

* [x] **Task Name** — short description of what was done

```

Rules:
- Add new work to **Open Tasks** with `Status: open`.
- Flip to `Status: working` before edits.
- If you can’t finish: document attempts, blockers, and link diffs/plans.
- On completion: remove from `TASKS.md` and add an entry to `TASK_COMPLETION.md`.
- Regularly prune stale/irrelevant tasks.

---

## Pre-Change Safety Checklist (all must be “yes”)
- Did you search and reuse existing code?
- Is the diff the smallest that meets acceptance criteria?
- Are there **no** secrets/PII in code/tests/logs?
- If schema/API changed: did you include migration/rollback and doc updates?
- Did you avoid starting servers/builds/migrations?
- Are tests and docs updated in the same PR?

---

## Required Tests & Checks
- FE: ESLint/TypeScript pass; Jest + Testing Library.
- BE: Ruff/Black pass; Pytest with deterministic fixtures.
- Contract/API tests when request/response shapes change.
- Snapshot tests only for stable UI; explain updates.
- Coverage thresholds follow repository guidelines; new code must be tested.

---

## Response Contract (every agent reply & each PR description)

**Reason Why** — one paragraph linking to REQ/DES/IMP.  
**Change Summary** — bullets of files touched and what changed.  
**Risks & Mitigations** — concrete risks + how they’re mitigated (flags/rollbacks).  
**Tests** — what was added/updated and why it proves correctness.  
**Docs Updated** — list updated docs (plans, API spec, READMEs).  
**Follow-ups** — empty by default; if non-empty, add to `TASKS.md`.

---

## Code Rules
- Keep PRs surgical and cohesive; one logical change per PR.
- Delete dead code when replacing.
- Feature-flag only when necessary; default off until acceptance criteria are met.
- Ensure indexes for any new query patterns.
- Prefer existing internal modules over adding new external deps.

---

## Error Handling
If a task cannot be completed:
- State the exact blocker (missing dep, unclear reqs, permission, context gap).
- Document attempts with minimal snippets or diffs.
- Leave precise next steps so another contributor can continue.

Vague notes like “needs fixing” or “not working” are not allowed.

---

## Cleanup Checkpoints
At the end of each major feature/sprint:
- Review `TASKS.md`; remove completed/irrelevant items.
- Move finished items to `TASK_COMPLETION.md`.
- Delete outdated plan docs from `/plans`.
- Verify docs reflect current state.
