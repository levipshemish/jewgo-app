{
  "commands": [
    {
      "name": "Codebase Clean v1.2 — Inventory→Decide→Execute",
      "description": "Scan repo, build index, score risk, prompt decisions, generate tasklist & PR plan. Starts with low-risk pilot batch.",
      "scope": "workspace",
      "arguments": {
        "BATCH_SIZE": { "type": "number", "default": 50 },
        "INCLUDE_DOCS_EARLY": { "type": "boolean", "default": true },
        "PILOT_ONLY": { "type": "boolean", "default": false }
      },
      "prompt": "You are an AI developer executing a surgical codebase cleanup with Mendel as the decider. **Never touch main/master**; propose changes only. Work on branch `chore/codebase-clean/${DATE}`.\\n\\nPHASE 0 — Pilot (low risk)\\nIf PILOT_ONLY or first run: operate on configs/docs/scripts only to validate pipeline. Outputs must be green before proceeding.\\n\\nPHASE 1 — Inventory (ignore heavy docs at first but INCLUDE_DOCS_EARLY=true means update touched folder READMEs inline)\\n• Scan entire repo excluding build artifacts (node_modules, .next, dist, build, coverage, *.map, cache).\\n• Emit `system_index.md` (tree + folder purposes + cross-links) and `system_inventory.json` (path, lines, language, deps_in/out, last_modified).\\n\\nPHASE 2 — Per-file review (top→bottom, batch=BATCH_SIZE; auto shrink to 25 if many High risks, grow to 100–200 for low-risk areas)\\nFor each file (including dotfiles/configs): produce one table row with columns:\\nPath | Purpose(1-line) | UsedInProd(Yes/No/Unknown) | Action(KEEP/REFACTOR/MOVE/DELETE/ARCHIVE) | RiskScore(0–18) | RiskClass(L/M/H) | Confidence(0–1) | FanIn | DepsOut | HasTests(Y/N) | Rationale(≤2 lines).\\nRisk scoring (sum of 6 axes, thresholds baked-in):\\nA Usage breadth: 0≤2 local, 1=3–9 in one feature, 2=10–29 or ≥2 features, 3≥30/app-wide/core lib.\\nB Runtime criticality: 0 dev-only, 1 optional UX, 2 core UX, 3 auth/payments/data integrity.\\nC Coupling/cycles: 0 isolated, 1 mild, 2 hotspot/any cycle, 3 multiple cycles+cross-layer.\\nD Data/state: 0 none, 1 cache/flags, 2 DB R/W, 3 schema/PII/migrations/queues.\\nE Tests: 0 unit+e2e ≥70%, 1 30–69%, 2 <30% types-only, 3 none.\\nF Reversibility: 0 trivial, 1 rename/API-compatible, 2 API change, 3 one-way/data-destructive.\\nConfidence (start 0.35; clamp 0–1): +0.20 strong types; +0.15 tests hit; +0.10 CODEOWNER active ≤90d; +0.10 docs/JSDoc; +0.10 seen in prod logs ≤30d; −0.15 unknown usage; −0.10 stale ≥12mo.\\n\\nPHASE 3 — Decision prompt (interactive; stop and ask)\\nAfter each batch, present compact approval prompt grouped by action with IDs:\\nDELETE(n): … | MOVE(n): src→dst | REFACTOR(n): titles | UNKNOWN(n): …\\nAsk Mendel to reply: `approve [ids]`, `hold [id]`, `edit [id:new-target]`.\\nLog approvals to `clean/decisions.yml` with timestamp and approver.\\n\\nPHASE 4 — Tasklist & PR plan (dependency-aware)\\nGenerate `clean/tasklist.yml` sorted by prerequisites and risk (execute order: moves → shims → refactors → deletions → shim removal next release). Each task: id, title, action, paths, depends_on, est_effort, risk, rollback.\\nEmit `clean/pr_plan.md` (batched PRs ≤300 LOC when possible) and scripts: `scripts/apply_moves.sh`, `scripts/archive_deleted.sh`, `scripts/rollback_<PR>.sh`.\\n\\nDOCS (inline, not deferred)\\nEvery PR/commit must include WHY/RISK/ROLLBACK/IMPACT. Update folder README when touching a folder. CI fails if `/api` or `/lib/public` change without doc delta.\\n\\nDEPS (order matters)\\nPass1 UNUSED: remove via knip/depcheck, document dynamic exceptions. Pass2 MISSING: promote runtime deps & peerDeps. Pass3 VERSION: pin critical libs; add Renovate/Dependabot; run e2e on preview.\\n\\nCI/CD GATES (blockers)\\nRequire: lint, typecheck, unit, e2e_smoke, build, dead-code scan (knip/ts-prune), dep audit, dependency-cruiser rules (no cycles/cross-layer), markdown-link-check, bundle stats. Fail PR if bundle or vendor >5% up, new dead exports, or LCP synthetic ↑>10%. Upload artifacts: coverage, graph, stats, inventory delta.\\n\\nROLLBACK\\nTag `pre-clean-${DATE}` before execution. Use shims/barrels for moves with deprecation date; remove N releases later. Migrations require up/down and shadow-copy for destructive changes. Feature refactors behind flags; canary first. Auto-generate `scripts/rollback_<PR>.sh`.\\n\\nHOTFIXES\\nRelease/hotfix branches allowed; cherry-pick into cleanup branch immediately, then rebase and make CI green before resuming.\\n\\nMONITORING & COMMS\\nCreate `#cleanup-watch` alerts for metric breaches. Weekly digest: done/next/risks/metrics. Maintain Risk Board for High (≥9) items with owners/ETA.\\n\\nOUTPUT NOW\\n1) Produce/refresh `system_index.md` + `system_inventory.json`.\\n2) Emit first batch review table (size=BATCH_SIZE, pilot set = configs/docs/scripts).\\n3) Show the decision prompt with IDs grouped by action and wait for Mendel’s approvals before generating the tasklist.\\nRemember: do not modify code; only produce artifacts, prompts, and scripts until approvals are given."
    }
  ]
}
