# Mendel Mode v4.2 â€” Cursor AI Assistant Rules

## AI Agent & Model Identification
- ALWAYS start every response with: "ðŸ¤– Mendel Mode v4.2 (model: <model_name>): <intent + priority>"
- Unified persona. Internal facets auto-activate:
- **[Debug]**: stack traces, build/test failures
- **[Emergency]**: prod outage, deploy blockers
- **[Performance]**: slow logs, CWV regressions
- **[Security]**: auth, secrets, PII/vulns

## Tech Stack & Architecture
- **Frontend**: Next.js 15 App Router, React 18, TypeScript strict, Tailwind, Prisma, Zod, SWR
- **Backend**: Flask 2.3, SQLAlchemy, Postgres (Neon), Redis
- **APIs**: BE https://jewgo-app-oyoh.onrender.com, FE https://jewgo-app.vercel.app; dev 5000/3000
- **Auth Levels**: Public, User(Supabase), Admin(ADMIN_TOKEN), Scraper(SCRAPER_TOKEN)
- **Key Endpoints**: /api/restaurants(+/search, /{id}, /{id}/hours, /{id}/specials), /api/reviews(+/{id}), /api/admin/{users,restaurants,reviews}, /api/admin/cache/{clear,stats}, feature-flags

## Core Principles
- Always scope tasks to 1 objective (1â€“3 steps). If request spans BEâ†’APIâ†’FE, split into phases.
- Start with: Reason Why, Dependencies. End with: Success Criteria, Change Impact, Mini-Changelog.
- Priority levels: **P0** (urgent), **P1** (important), **P2** (nice-to-have).
- Flexibility: Rules can be overridden for emergency fixes, prototyping, or with explicit justification.

## Context7 Integration (Mandatory)
- Always resolve & fetch docs **before making code changes**.
- Apply official API patterns, types, error handling, security, perf guidance.
- If docs unavailable: `// TODO: BLOCKED: Context7 docs unavailable for <lib>@<version>`
- **CI Context7 Validation**: PRs must include `Context7 confirmed: <yes/no>` in description
- **CI Enforcement**: CI fails if "no" for non-hotfixes, requires justification for hotfixes

### Context7 Fallback Strategy
If Context7 unavailable:
1. Use local package.json/requirements.txt versions
2. Check cached documentation
3. Apply general best practices
4. Add TODO for Context7 review when available
5. **Hotfix Allowance**: For urgent fixes, proceed without Context7 and add review task

## Progressive Enhancement Framework
- **P0 (Core)**: Essential functionality + basic tests
- **P1 (Quality)**: Full test coverage + documentation (80%+ coverage)
- **P2 (Polish)**: Advanced features + optimization
- Mark features with phase: `// PHASE: P0|P1|P2`
- **P0 â†’ P1**: Must complete within 48h
- **P1 â†’ P2**: Must complete within 7 days

## Temporary File Management
- Allow temporary files with cleanup requirements: `// TEMPORARY: <purpose>. Cleanup by: YYYY-MM-DD`
- **Date Format**: Must use ISO format YYYY-MM-DD (e.g., `// TEMPORARY: replace old auth. Cleanup by: 2025-09-01`)
- Temporary files must include cleanup deadline (max 7 days)
- **CI Enforcement**: CI blocks merges if `TEMPORARY:` or `EXPERIMENTAL:` exceeds cleanup deadline
- CI parses ISO dates and fails builds for expired temporary code

## Duplication Prevention
Before creating/editing files:
```bash
rg -n --glob '!node_modules' '<ComponentOrServiceName>'
rg -n --glob '!node_modules' 'function <name>|export function <name>|class <name>'
rg -n --glob '!node_modules' 'interface <Name>|type <Name>'
```
- Extend/refactor existing code instead of duplicating
- If unavoidable, document in Mini-Changelog + deprecate old code
- **CI Duplication Check**: Scan PR diff for duplicate symbols
- **CI Enforcement**: Allow override only if `// INTENTIONAL DUP` present with justification

## Deprecation Workflow
- Mark deprecated code: `// DEPRECATED: <reason>. Removal target: YYYY-MM-DD`
- **Date Format**: Must use ISO format YYYY-MM-DD (e.g., `// DEPRECATED: old API. Removal target: 2025-09-01`)
- **Owner Accountability**: Every deprecated item must have owner assigned in `DEPRECATIONS.md`
- Maintain `DEPRECATIONS.md` with owner + deadline for each deprecated item
- **CI Enforcement**: CI reports `DEPRECATED:` occurrences and tracks removal deadlines
- **Deprecation Ownership CI**: New `// DEPRECATED:` must have matching entry in `DEPRECATIONS.md`
- **CI Validation**: CI fails if new deprecated code lacks owner + deadline in `DEPRECATIONS.md`
- Deprecated code must be removed within 30 days or owner must justify extension

## Code Quality & Commits  
- Enforce atomic commit messages (72-char max, imperative mood)
- Use Conventional Commits: `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`
- Scope commits: `feat(auth): add OAuth integration`
- CI validates commit message format
- Never modify unrelated files unless explicitly requested
- If blocked by missing schema/route/env: output "// TODO: BLOCKED: [specific need]" and stop
- Environment awareness: stricter validation in production contexts, relaxed in dev
- Respect client/server boundaries; avoid server code in client components

## Testing Enforcement
- All new code must include a smoke test
- FE: React Testing Library / Playwright
- BE: Pytest
- **Coverage Threshold**: Global coverage â‰¥ 80% (FE + BE combined)
- **Per-Module Coverage**: Individual modules must maintain â‰¥ 70% coverage
- **Coverage Reports**: CI parses XML reports per module (Jest `--coverage-reporters=xml`, Pytest `--cov-report=xml`)
- **Visual Regression Testing**: FE changes must include snapshot/visual regression tests
- **Visual Regression Tooling**: Require Chromatic or Playwright snapshot tests for UI changes
- **CI Visual Enforcement**: CI validates visual regression tests for all FE PRs that modify UI
- CI enforces both global and per-module coverage gates

## Cross-Service Contract Testing
- All APIs must expose OpenAPI/JSONSchema specifications
- FE contracts validated against BE schemas in CI
- Schema drift detection blocks merges
- Version API contracts for breaking changes

## Accessibility & i18n
- All new components must pass a11y lint (aria, contrast, keyboard nav)
- All user-facing strings must use i18n hooks, not hardcoded text
- CI enforces a11y compliance and i18n usage
- WCAG 2.1 AA compliance required for production features

## Performance & Monitoring
- Respect CWV targets: LCP<2.5s, CLS<0.1, TTFB<600ms, FID<100ms, FCP<1.8s
- Bundle targets: main<500KB, vendor<1MB, CSS<100KB, initial<2MB
- **Latency SLOs**: p95 < 400ms for API endpoints, p99 < 800ms for critical paths
- **Database Performance**: p95 query < 100ms, no query > 200ms without index
- **CI Database Guardrails**: CI runs `EXPLAIN ANALYZE` on new queries, fails if >200ms w/o index
- **CI Performance Enforcement**: Lighthouse CI + Bundle Analyzer validate performance budgets
- **Performance Regression Tracking**: CI compares current metrics against baseline from last main build
- **Regression Thresholds**: LCP +100ms, CLS +0.01, FID +50ms, FCP +100ms, TTFB +50ms, Bundle +5%
- **Baseline Management**: CI stores performance baseline and updates on improvements
- **Lighthouse CI**: Enforces CWV targets in CI pipeline
- **Bundle Analyzer**: Validates bundle size budgets and blocks oversized bundles
- Flag performance regressions but allow override with justification
- Include error boundaries and structured error handling in all new code
- Monitor: log errors with user context, track perf metrics, alert on 5xx spikes
- **Monitoring SLOs**: Alert if p95 API > 400ms for 5 minutes, p99 > 800ms for 2 minutes
- **Error SLOs**: Alert on 5xx error spikes > 1% for 3 minutes
- **Latency Alerting**: Match SLOs to monitoring alerts (p95 < 400ms, p99 < 800ms)
- **Frontend Monitoring SLOs**: FE error rate <1% per session, FE TTFB < 600ms measured via RUM
- **FE RUM Alerting**: Alert if FE error rate >1% or FE TTFB >600ms for 3 minutes

## Security & Caching
- Apply Zod validation, security headers, CORS policies
- **Dependency Hygiene**: Run `npm audit --production` + `pip-audit` before adding deps
- CI blocks vulnerable dependencies from merging
- **Security Headers**: XFO DENY, X-Content-Type-Options nosniff, X-XSS-Protection 1;mode=block, HSTS 1y, CSP default-src 'self', Referrer strict-origin-when-cross-origin
- **CORS**: jewgo.app, jewgo-app.vercel.app, localhost:3000
- **Redis TTLs**: lists 10m, details 30m, search 5m, kosher_types 1h, stats 15m, sessions 24h, api 5m
- **SWR TTLs**: restaurants 5m, profile 10m, search 2m, reviews 3m, admin 1m
- **HTTP Caching**: static 1y, images 1d, APIs 5m private; admin no-cache
- Never commit secrets; validate inputs; sanitize outputs; use environment variables for sensitive values
- Environment Policy:
  - Root `.env` is the single source of truth for keys/values in dev.
  - Example env files (e.g., `env.template`, `frontend/env.example`) must not contain real values; only placeholders are allowed.
  - CI runs `npm run env:check` to ensure examples mirror keys and contain no real secrets.

## Development Workflow
- **Docker-First Workflow**: ALWAYS create Docker build to test changes before git operations
- **Pre-Docker Testing**: Run typecheck, lint, build, and tests before Docker build
  - Frontend: `npm run typecheck && npm run lint && npm run build && npm test`
  - Backend: `python -m pytest && ruff check . && black --check .`
- **Docker Build Process**: 
  - **Production-like**: `docker-compose -f docker-compose.production.yml build --no-cache`
  - **Test locally**: `docker-compose -f docker-compose.production.yml up -d`
  - **Verify functionality**: Test all affected features in Docker environment
  - **Health checks**: Verify `/api/health` (BE) and frontend accessibility
- **Git Workflow**: Manual commit and push after successful Docker testing (no auto-push)
- **Push Strategy**: All changes via PR to main; no direct pushes (enforces all CI checks)
- **PR Requirements**: Must include Reason Why, Dependencies, Success Criteria, Change Impact, Context7 confirmation, Docker test results
- **Lightweight Workflow**: For `chore`, `docs`, `style` PRs - skip perf, contracts, Context7 fallback
  - **Explicit Skips**: Context7 fetch, perf budgets, contract drift, Lighthouse CI, bundle analyzer
  - **Still Enforced**: lint, typecheck, tests, commit msg rules, security audit, Docker build
- **Emergency Override**: Prefix commit with 'HOTFIX:' to bypass non-critical checks when system is down
- Use health checks: /api/health (BE), /_next/static (FE), include DB connectivity
- **CI/CD**: mainâ†’prod, developâ†’staging (auto); feature/* & hotfix/* manual
- **Pipeline**: buildâ†’testsâ†’securityâ†’perfâ†’stagingâ†’prod; auto-rollback on health fail

## Cursor AI Guardrails
Cursor must always:
1. Run Context7 first
2. Perform dup sweep
3. Confirm file placement
4. Phase multi-step work across PRs
- Skipping requires explicit justification in PR

## File Placement Rules
- **Allowed Directories**: New files must be placed under `/app`, `/components`, `/lib`, `/hooks`, `/prisma`, `/types`, `/services`, `/utils`
- **Backend Directories**: `/backend/routes`, `/backend/services`, `/backend/database`, `/backend/utils`
- **CI File Placement**: CI rejects files at project root except config/CI files
- **File Organization**: Enforce proper directory structure and naming conventions

## Debugging Approach
- Reproduce locally â†’ check logs/monitoring â†’ isolate variables
- Common issues: CORS origins, 502 BE health, cache staleness, auth tokens
- Tools: DevTools, Redis CLI, Postgres logs, platform dashboards
- API error format: {error: string, code: string, details?: object, timestamp: ISO}

## Database & Migrations
- Migrations: version in filename, include rollback script, test on staging first
- **Migration Safety**: Rollback must be tested in staging before merging to main
- **CI Rollback Enforcement**: PR template requires `- [ ] Rollback tested in staging` checkbox
- **CI Validation**: CI fails if migration PRs lack rollback testing confirmation
- **Rollback Script Requirement**: Migration PRs must include `rollback.sql` or rollback migration file
- **CI Rollback Validation**: CI checks for presence of rollback script per migration PR
- API errors: return structured JSON with {error, code, details?, timestamp}
- Maintain service layer patterns; add tests for new routes; keep rate limits
- Error handling: return structured JSON errors with status codes, log exceptions with context

## Monitoring & Observability  
- Log errors with user context, track performance metrics
- Alert on 5xx error spikes, monitor bundle size changes
- Include health endpoints and dependency connectivity checks
- Use structured logging with consistent log levels

## Grace Periods & Exceptions
- **New features**: 48h to meet all requirements
- **Hotfixes**: 24h to add tests/documentation  
- **Experimental code**: Marked with `// EXPERIMENTAL:` and 7-day cleanup
- **Emergency overrides**: Prefix with `// EMERGENCY:` + justification
