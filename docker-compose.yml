version: '3.8'

services:
# PostgreSQL is running externally, not on this server

  redis:
    image: redis:7-alpine
    container_name: jewgo_redis
    command: redis-server
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      no_cache: true
    container_name: jewgo_backend
    environment:
      # Database - External PostgreSQL configuration
      POSTGRES_DB: jewgo_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: Jewgo123
      DATABASE_URL: postgresql://app_user:Jewgo123@129.80.190.110:5432/jewgo_db
      PGHOST: 129.80.190.110
      PGPORT: 5432
      PGDATABASE: jewgo_db
      PGUSER: app_user
      PGPASSWORD: Jewgo123
      
      # Redis - Connect to local Redis container
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: 
      REDIS_DB: 0
      
      # Application - Local development settings
      NODE_ENV: development
      FLASK_ENV: development
      SECRET_KEY: dev-secret-key-change-in-production
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-production
      
      # CORS - Allow production frontend and local development
      CORS_ORIGINS: https://jewgo.app,https://jewgo-app.vercel.app,https://jewgo-app-git-main.vercel.app,https://jewgo-app-git-develop.vercel.app,http://localhost:3000,http://127.0.0.1:3000,http://localhost:5000,http://127.0.0.1:5000,http://localhost:5001,http://127.0.0.1:5001,http://104.203.9.103:3000,http://104.203.9.103:5000,http://104.203.9.103:8000,http://104.203.9.103:8080,https://104.203.9.103:3000,https://104.203.9.103:5000,https://104.203.9.103:8000,https://104.203.9.103:8080,http://10.0.0.189:3000,http://10.0.0.189:5000,http://172.17.0.1:3000,http://172.17.0.1:5000,http://172.18.0.1:3000,http://172.18.0.1:5000
      
      # Google Maps
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      
      # GitHub Webhook
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      
      # Sentry Configuration
      SENTRY_DSN: https://48a8a5542011706348cddd01c6dc685a@o4509798929858560.ingest.us.sentry.io/4509798933004288
      
      # Cursor HMAC Secret for pagination
      CURSOR_HMAC_SECRET_V5: ${CURSOR_HMAC_SECRET_V5:-dev-cursor-secret-change-in-production}
      
      # Feature Flags
      FEATURE_MAIN_API_V5: ${FEATURE_MAIN_API_V5:-true}
      FEATURE_REVIEWS_API_V5: ${FEATURE_REVIEWS_API_V5:-true}
      FEATURE_FLAG_V5_MAIN_API_V5: ${FEATURE_FLAG_V5_MAIN_API_V5:-true}
      FEATURE_FLAG_V5_REVIEWS_API_V5: ${FEATURE_FLAG_V5_REVIEWS_API_V5:-true}
      
      # AWS S3 Backup Configuration
      # AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      # AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      S3_BACKUP_BUCKET: jewgo-backups1
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5001:5000"
    volumes:
      - ./backend/uploads:/app/uploads
    restart: unless-stopped

  webhook:
    build:
      context: ./scripts/deployment
      dockerfile: Dockerfile.webhook
    container_name: jewgo_webhook
    environment:
      WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
    volumes:
      - /home/ubuntu/jewgo-app:/home/ubuntu/jewgo-app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    ports:
      - "8080:8080"
    restart: unless-stopped

# Frontend is deployed on Vercel, not running on this server

  nginx:
    image: nginx:alpine
    container_name: jewgo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
    # No dependencies - Nginx can run independently
    restart: unless-stopped

volumes:
  redis_data: