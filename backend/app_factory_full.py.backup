#!/usr/bin/env python3
"""
V5 Application Factory - Clean consolidated version.

This is a streamlined version of the app factory that focuses on v5 API registration
and removes all the inline route definitions that are now handled by v5 blueprints.
"""

import os
import logging
import time
import traceback
from datetime import datetime, timezone
from flask import Flask, request, jsonify, g
# from flask_cors import CORS  # Disabled - Nginx handles CORS
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_caching import Cache
from flask_session import Session
import redis
import sentry_sdk
from sentry_sdk.integrations.flask import FlaskIntegration
from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration

# Import configuration and utilities
from config.config import Config
from utils.logging_config import configure_logging, get_logger
from utils.limiter import set_limiter as _set_shared_limiter

logger = get_logger(__name__)

# Check Redis availability
try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False
    logger.warning("Redis not available - using memory fallback")

def _initialize_sentry() -> None:
    """Initialize Sentry error tracking if available."""
    try:
        sentry_dsn = os.environ.get("SENTRY_DSN")
        if sentry_dsn and sentry_dsn.strip() and sentry_dsn.startswith(('http://', 'https://')):
            sentry_sdk.init(
                dsn=sentry_dsn,
                integrations=[
                    FlaskIntegration(),
                    SqlalchemyIntegration(),
                ],
                traces_sample_rate=1.0,
                environment=os.environ.get("FLASK_ENV", "development"),
                debug=os.environ.get("FLASK_ENV") == "development",
            )
            logger.info("Sentry initialized successfully", dsn=sentry_dsn[:20] + "...")
        else:
            logger.warning("SENTRY_DSN not configured, error tracking disabled")
    except Exception as e:
        logger.error(
            "Sentry import failed, error tracking disabled",
            error=str(e),
            traceback=traceback.format_exc(),
        )
    except Exception as e:
        logger.error(
            "Sentry initialization failed",
            error=str(e),
            traceback=traceback.format_exc(),
        )

def _configure_logging() -> None:
    """Configure structured logging using unified logging configuration."""
    configure_logging()

def _load_dependencies():
    """Load all required dependencies."""
    try:
        from utils.feature_flags import (
            feature_flag_context,
            feature_flag_manager,
            get_feature_flags,
            is_feature_enabled,
            require_feature_flag,
        )
        from utils.security import (
            require_admin_auth,
        )
        
        # Try to import v4 components
        v4_deps = {}
        try:
            from database.database_manager_v4 import DatabaseManager as DatabaseManagerV4
            from utils.cache_manager_v4 import CacheManagerV4
            from utils.config_manager import ConfigManager
            v4_deps = {
                "DatabaseManagerV4": DatabaseManagerV4,
                "CacheManagerV4": CacheManagerV4,
                "ConfigManager": ConfigManager,
            }
            logger.info("V4 dependencies loaded successfully")
        except Exception as e:
            logger.warning(f"Could not load v4 dependencies: {e}")
            
        return {
            "Config": Config,
            "security": {
                "require_admin_auth": require_admin_auth,
            },
            "feature_flags": {
                "feature_flag_manager": feature_flag_manager,
                "require_feature_flag": require_feature_flag,
                "feature_flag_context": feature_flag_context,
                "is_feature_enabled": is_feature_enabled,
                "get_feature_flags": get_feature_flags,
            },
            **v4_deps,  # Include v4 dependencies
        }
    except ImportError:
        return {}

def create_app(config_class=None):
    """Application factory function that creates and configures the Flask app with v5 APIs."""
    
    # Start performance monitoring
    startup_start_time = time.time()
    logger.info("Starting application factory initialization"); print("DEBUG: Starting app factory")
    
    # Initialize Sentry first
    _initialize_sentry()
    
    # Configure logging
    _configure_logging()
    
    # Create Flask app
    app = Flask(__name__)
    
    # Load configuration
    if config_class is None:
        try:
            config_class = Config
        except ImportError:
            logger.warning("Could not load Config class, using default configuration")
            config_class = object()
            
    try:
        print("DEBUG: About to load config"); app.config.from_object(config_class)
        logger.info("Configuration loaded successfully"); print("DEBUG: Configuration loaded")
    except Exception as e:
        logger.error(f"Failed to load configuration: {e}")
        if os.environ.get("FLASK_ENV") == "production":
            raise RuntimeError(f"Configuration loading failed in production: {e}") from e
        else:
            logger.warning("Using fallback configuration for development")
            # Only use fallback secrets in development
            if os.environ.get("FLASK_ENV") == "development":
                app.config["SECRET_KEY"] = os.environ.get("SECRET_KEY", "dev-secret-key")
                app.config["DATABASE_URL"] = os.environ.get(
                    "DATABASE_URL",
                    "postgresql://postgres:postgres@localhost:5432/postgres",
                )
            else:
                # In staging/testing, require proper configuration
                raise RuntimeError("Configuration required for non-development environment")
    
    
    # Log startup performance
    startup_time = time.time() - startup_start_time
    logger.info(f"V5 application factory initialization completed successfully in {startup_time:.2f} seconds"); print("DEBUG: App factory completed")
    # Register API blueprints
    logger.info("Starting API blueprint registration..."); print("DEBUG: Starting blueprint registration")
    logger.info("About to import monitoring API...")
    try:
        from routes.v5.monitoring_api import monitoring_v5
        app.register_blueprint(monitoring_v5)
        logger.info("Monitoring API routes registered")
    except Exception as e:
        logger.error(f"Failed to register monitoring API: {e}"); import traceback; logger.error(traceback.format_exc())

    try:
        # from routes.v5.api_v5 import api_v5
        # app.register_blueprint(api_v5)
        logger.info("Main API v5 routes registered")
    except Exception as e:
        logger.error(f"Failed to register API v5: {e}"); import traceback; logger.error(traceback.format_exc())

    return app
