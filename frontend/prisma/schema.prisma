generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

// Note: During build time (especially in CI/CD), DATABASE_URL may not be available
// This is expected behavior and the build will continue without database connection
// The Prisma client will be generated but will not attempt to connect until runtime
model Restaurant {
  id                       Int       @id @default(autoincrement())
  created_at               DateTime  @db.Timestamp(6)
  updated_at               DateTime  @db.Timestamp(6)
  current_time_local       DateTime? @db.Timestamp(6)
  hours_parsed             Boolean?
  name                     String    @db.VarChar(255)
  address                  String    @db.VarChar(500)
  city                     String    @db.VarChar(100)
  state                    String    @db.VarChar(50)
  zip_code                 String    @db.VarChar(20)
  phone_number             String    @map("phone_number") @db.VarChar(50)
  website                  String?   @db.VarChar(500)
  certifying_agency        String    @db.VarChar(100)
  kosher_category          String    @db.VarChar(20)
  listing_type             String    @db.VarChar(100)
  google_listing_url       String?   @db.VarChar(500)
  price_range              String?   @db.VarChar(20)
  short_description        String?
  hours_of_operation       String?
  hours_json               String?
  hours_last_updated       DateTime? @db.Timestamp(6)
  timezone                 String?   @db.VarChar(50)
  latitude                 Float?
  longitude                Float?
  is_cholov_yisroel        Boolean?
  is_pas_yisroel           Boolean?
  cholov_stam              Boolean?
  image_url                String?   @db.VarChar(2000)
  specials                 String?
  status                   String?   @db.VarChar(20)
  google_rating            Float?
  google_review_count      Int?
  google_reviews           String?
  user_email               String?   @db.VarChar(255)
  owner_name               String?
  owner_email              String?
  owner_phone              String?
  is_owner_submission      Boolean?  @default(false)
  business_email           String?
  instagram_link           String?
  facebook_link            String?
  tiktok_link              String?
  business_images          String[]
  submission_status        String?   @default("pending_approval")
  submission_date          DateTime? @db.Timestamp(6)
  approval_date            DateTime? @db.Timestamp(6)
  approved_by              String?
  rejection_reason         String?
  business_license         String?
  tax_id                   String?
  years_in_business        Int?
  seating_capacity         Int?
  delivery_available       Boolean?  @default(false)
  takeout_available        Boolean?  @default(false)
  catering_available       Boolean?  @default(false)
  preferred_contact_method String?
  preferred_contact_time   String?
  contact_notes            String?
  deleted_at               DateTime? @db.Timestamp(6)

  // Relations
  reviews Review[]
  images  RestaurantImage[]

  @@index([business_email], map: "idx_restaurants_business_email")
  @@index([is_owner_submission], map: "idx_restaurants_is_owner_submission")
  @@index([owner_email], map: "idx_restaurants_owner_email")
  @@index([submission_date], map: "idx_restaurants_submission_date")
  @@index([submission_status], map: "idx_restaurants_submission_status")
  @@map("restaurants")
  @@schema("public")
}

model Review {
  id                String   @id @db.VarChar(50)
  restaurant_id     Int
  restaurant        Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id           String   @db.VarChar(50)
  user_name         String   @db.VarChar(255)
  user_email        String?  @db.VarChar(255)
  rating            Int
  title             String?  @db.VarChar(255)
  content           String
  images            String?
  status            String   @db.VarChar(20)
  created_at        DateTime @db.Timestamp(6)
  updated_at        DateTime @updatedAt @db.Timestamp(6)
  moderator_notes   String?
  verified_purchase Boolean
  helpful_count     Int
  report_count      Int

  @@map("reviews")
  @@schema("public")
}

model ReviewFlag {
  id               String    @id @db.VarChar(50)
  review_id        String    @db.VarChar(50)
  reason           String    @db.VarChar(50)
  description      String?
  reported_by      String    @db.VarChar(50)
  reported_at      DateTime  @db.Timestamp(6)
  status           String    @db.VarChar(20)
  resolved_by      String?   @db.VarChar(50)
  resolved_at      DateTime? @db.Timestamp(6)
  resolution_notes String?

  @@map("review_flags")
  @@schema("public")
}

model RestaurantImage {
  id                   Int       @id @default(autoincrement())
  restaurant_id        Int?
  restaurant           Restaurant? @relation(fields: [restaurant_id], references: [id])
  image_url            String?   @db.VarChar
  image_order          Int?
  cloudinary_public_id String?   @db.VarChar
  created_at           DateTime? @db.Timestamp(6)
  updated_at           DateTime? @db.Timestamp(6)

  @@map("restaurant_images")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model FloridaSynagogue {
  id                 Int
  created_at         DateTime? @db.Timestamp(6)
  updated_at         DateTime? @db.Timestamp(6)
  name               String?   @db.VarChar
  address            String?   @db.VarChar
  city               String?   @db.VarChar
  state              String?   @db.VarChar
  zip_code           String?   @db.VarChar
  rabbi              String?   @db.VarChar
  affiliation        String?   @db.VarChar
  phone              String?   @db.VarChar
  email              String?   @db.VarChar
  website            String?   @db.VarChar
  social_media       String?
  shacharit          String?
  mincha             String?
  maariv             String?
  shabbat            String?
  sunday             String?
  weekday            String?
  kosher_info        String?
  parking            String?
  accessibility      String?
  additional_info    String?
  url                String?   @db.VarChar
  data_quality_score Int?
  is_chabad          Boolean?
  is_young_israel    Boolean?
  is_sephardic       Boolean?
  has_address        Boolean?
  has_zip            Boolean?
  latitude           Float?
  longitude          Float?

  @@map("florida_synagogues")
  @@ignore
  @@schema("public")
}

/// New comprehensive synagogues table
model Shul {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  description          String?
  address              String?
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zip_code             String?   @db.VarChar(20)
  country              String?   @db.VarChar(50) @default("USA")
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  phone_number         String?   @db.VarChar(50)
  website              String?   @db.VarChar(500)
  email                String?   @db.VarChar(255)
  
  // Shul specific fields
  shul_type            String?   @db.VarChar(100) // orthodox, conservative, reform, etc.
  shul_category        String?   @db.VarChar(100) // ashkenazi, sephardic, chabad, etc.
  denomination         String?   @db.VarChar(100) // orthodox, conservative, reform, etc.
  business_hours       String?
  hours_parsed         Boolean   @default(false)
  timezone             String?   @db.VarChar(50)
  
  // Services and minyanim
  has_daily_minyan     Boolean   @default(false)
  has_shabbat_services Boolean   @default(true)
  has_holiday_services Boolean   @default(true)
  has_women_section    Boolean   @default(true)
  has_mechitza         Boolean   @default(true)
  has_separate_entrance Boolean  @default(false)
  
  // Location and distance
  distance             String?   @db.VarChar(50)
  distance_miles       Decimal?  @db.Decimal(8, 2)
  
  // Ratings and reviews
  rating               Decimal?  @db.Decimal(3, 2)
  review_count         Int       @default(0)
  star_rating          Decimal?  @db.Decimal(3, 2)
  google_rating        Decimal?  @db.Decimal(3, 2)
  
  // Images and media
  image_url            String?
  logo_url             String?
  
  // Shul facilities and features
  has_parking          Boolean   @default(false)
  has_disabled_access  Boolean   @default(false)
  has_kiddush_facilities Boolean @default(false)
  has_social_hall      Boolean   @default(false)
  has_library          Boolean   @default(false)
  has_hebrew_school    Boolean   @default(false)
  has_adult_education  Boolean   @default(false)
  has_youth_programs   Boolean   @default(false)
  has_senior_programs  Boolean   @default(false)
  
  // Religious and cultural
  rabbi_name           String?   @db.VarChar(255)
  rabbi_phone          String?   @db.VarChar(50)
  rabbi_email          String?   @db.VarChar(255)
  religious_authority  String?   @db.VarChar(255)
  community_affiliation String?  @db.VarChar(255)
  kosher_certification String?   @db.VarChar(255)
  
  // Membership and fees
  membership_required  Boolean   @default(false)
  membership_fee       Decimal?  @db.Decimal(10, 2)
  fee_currency         String?   @db.VarChar(3) @default("USD")
  accepts_visitors     Boolean   @default(true)
  visitor_policy       String?
  
  // Status and metadata
  is_active            Boolean   @default(true)
  is_verified          Boolean   @default(false)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  
  // Search and filtering
  search_vector        Unsupported("tsvector")?
  tags                 String[]
  admin_notes          String?
  specials             String?
  listing_type         String?   @db.VarChar(100) @default("shul")

  @@map("shuls")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model User {
  id            String      @id @db.VarChar(50)
  name          String?     @db.VarChar(255)
  email         String      @unique @db.VarChar(255)
  emailverified DateTime?   @db.Timestamp(6)
  image         String?     @db.VarChar(500)
  issuperadmin  Boolean
  createdat     DateTime    @db.Timestamp(6)
  updatedat     DateTime    @db.Timestamp(6)
  deletedAt     DateTime?   @db.Timestamp(6)
  adminRoles    AdminRole[]
  auditLogs     AuditLog[]

  @@map("users")
  @@schema("public")
}

model AdminRole {
  id         Int       @id @default(autoincrement())
  userId     String    @map("user_id") @db.VarChar(50)
  role       String    @db.VarChar(50)
  assignedBy String?   @map("assigned_by") @db.VarChar(50)
  assignedAt DateTime  @default(now()) @map("assigned_at") @db.Timestamp(6)
  expiresAt  DateTime? @map("expires_at") @db.Timestamp(6)
  isActive   Boolean   @default(true) @map("is_active")
  notes      String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_admin_roles_user")

  @@index([userId], map: "idx_admin_roles_user")
  @@map("admin_roles")
  @@schema("public")
}

model AdminConfig {
  key        String    @id @db.VarChar(100)
  value      Json
  updated_at DateTime? @db.Timestamp(6)
  updated_by String?   @db.VarChar(50)

  @@map("admin_config")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model accounts {
  id                String  @db.VarChar(50)
  userid            String  @db.VarChar(50)
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  provideraccountid String  @db.VarChar(50)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.VarChar(255)
  id_token          String?
  session_state     String? @db.VarChar(255)

  @@ignore
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model google_places_data {
  id                     Int
  restaurant_id          Int
  google_place_id        String?   @db.VarChar(255)
  name                   String?   @db.VarChar(255)
  formatted_address      String?   @db.VarChar(500)
  phone_number           String?   @db.VarChar(50)
  website                String?   @db.VarChar(500)
  rating                 Float?
  user_ratings_total     Int?
  price_level            Int?
  latitude               Float?
  longitude              Float?
  hours_json             Json?     @db.Json
  hours_text             String?
  timezone               String?   @db.VarChar(50)
  photos_json            Json?     @db.Json
  primary_photo_url      String?   @db.VarChar(500)
  types_json             Json?     @db.Json
  opening_hours_json     Json?     @db.Json
  reviews_json           Json?     @db.Json
  last_updated           DateTime  @db.Timestamp(6)
  next_update            DateTime  @db.Timestamp(6)
  update_frequency_hours Int?
  is_active              Boolean?
  error_count            Int?
  last_error             String?
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime? @db.Timestamp(6)

  @@ignore
  @@schema("public")
}

model marketplace {
  id                        Int       @id @default(autoincrement())
  created_at                DateTime  @db.Timestamp(6)
  updated_at                DateTime  @db.Timestamp(6)
  name                      String    @db.VarChar(255)
  title                     String    @db.VarChar(500)
  price                     Decimal   @db.Decimal(10, 2)
  category                  String    @db.VarChar(100)
  location                  String    @db.VarChar(500)
  vendor_name               String    @db.VarChar(255)
  city                      String    @db.VarChar(100)
  state                     String    @db.VarChar(50)
  zip_code                  String    @db.VarChar(20)
  latitude                  Float?
  longitude                 Float?
  product_image             String?   @db.VarChar(2000)
  additional_images         String[]  @db.VarChar
  thumbnail                 String?   @db.VarChar(2000)
  subcategory               String?   @db.VarChar(100)
  description               String?
  original_price            Decimal?  @db.Decimal(10, 2)
  currency                  String    @db.VarChar(10)
  stock                     Int
  is_available              Boolean
  is_featured               Boolean
  is_on_sale                Boolean
  discount_percentage       Int?
  vendor_id                 String?   @db.VarChar(100)
  vendor_logo               String?   @db.VarChar(2000)
  vendor_address            String?   @db.VarChar(500)
  vendor_phone              String?   @db.VarChar(50)
  vendor_email              String?   @db.VarChar(255)
  vendor_website            String?   @db.VarChar(500)
  vendor_rating             Float?
  vendor_review_count       Int
  vendor_is_verified        Boolean
  vendor_is_premium         Boolean
  kosher_agency             String?   @db.VarChar(100)
  kosher_level              String?   @db.VarChar(50)
  kosher_certificate_number String?   @db.VarChar(100)
  kosher_expiry_date        DateTime? @db.Date
  kosher_is_verified        Boolean
  is_gluten_free            Boolean
  is_dairy_free             Boolean
  is_nut_free               Boolean
  is_vegan                  Boolean
  is_vegetarian             Boolean
  allergens                 String[]  @db.VarChar
  tags                      String[]  @db.VarChar
  specifications            Json?
  shipping_info             Json?
  rating                    Float
  review_count              Int
  status                    String    @db.VarChar(20)
  priority                  Int
  expiry_date               DateTime? @db.Date
  created_by                String?   @db.VarChar(100)
  approved_by               String?   @db.VarChar(100)
  approved_at               DateTime? @db.Timestamp(6)
  notes                     String?
  external_id               String?   @db.VarChar(100)
  source                    String    @db.VarChar(50)

  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model marketplace_subcategories {
  id          Int
  category_id Int
  name        String
  slug        String
  sort_order  Int
  active      Boolean

  @@ignore
  @@schema("public")
}

/// Orders for marketplace products (store/commerce)
model marketplace_order {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  vendor_id   String    @db.VarChar(100)
  product_id  Int
  status      String    @db.VarChar(20) // pending|paid|shipped|cancelled
  total_cents Int
  currency    String    @db.VarChar(10)

  @@index([vendor_id], map: "idx_marketplace_order_vendor")
  @@index([status, created_at], map: "idx_marketplace_order_status_created")
  @@map("marketplace_orders")
  @@schema("public")
}

/// Customer/vendor messages (store inbox)
model marketplace_message {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @db.Timestamp(6)
  vendor_id  String    @db.VarChar(100)
  sender_id  String?   @db.VarChar(100)
  status     String    @db.VarChar(20) // unread|read
  subject    String?   @db.VarChar(255)
  body       String?   @db.VarChar(2000)

  @@index([vendor_id, status], map: "idx_marketplace_message_vendor_status")
  @@index([vendor_id, created_at], map: "idx_marketplace_message_vendor_created")
  @@map("marketplace_messages")
  @@schema("public")
}

/// Mapping of store vendors to admin users for scoped access
model vendor_admins {
  id         Int      @id @default(autoincrement())
  vendor_id  String   @db.VarChar(100)
  user_id    String   @db.VarChar(50)
  role       String   @db.VarChar(20) // owner|manager
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([vendor_id, user_id], map: "uq_vendor_user")
  @@index([user_id], map: "idx_vendor_admin_user")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model sessions {
  id           String   @db.VarChar(50)
  sessiontoken String   @db.VarChar(255)
  userid       String   @db.VarChar(50)
  expires      DateTime @db.Timestamp(6)

  @@ignore
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model verification_tokens {
  identifier String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  expires    DateTime @db.Timestamp(6)

  @@ignore
  @@schema("public")
}

model AuditLog {
  id            String    @id @default(cuid())
  userId        String    @db.VarChar(50)
  action        String    @db.VarChar(100)
  entityType    String    @db.VarChar(50)
  entityId      String?   @db.VarChar(50)
  oldData       String?
  newData       String?
  timestamp     DateTime  @default(now()) @db.Timestamp(6)
  ipAddress     String?   @db.VarChar(45)
  userAgent     String?
  sessionId     String?   @db.VarChar(100)
  correlationId String?   @db.VarChar(100)
  auditLevel    String    @default("info") @db.VarChar(20)
  metadata      String?
  deletedAt     DateTime? @db.Timestamp(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([timestamp])
  @@index([auditLevel])
  @@index([correlationId])
  @@index([deletedAt])
  @@map("audit_logs")
  @@schema("public")
}

/// Jewish stores and businesses (grocery, Judaica, bakery, etc.)
model Store {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  description          String?
  address              String?   @db.VarChar(500)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zip_code             String?   @db.VarChar(20)
  country              String?   @db.VarChar(50) @default("USA")
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  phone_number         String?   @db.VarChar(50)
  website              String?   @db.VarChar(500)
  email                String?   @db.VarChar(255)
  
  // Store specific fields
  store_type           String?   @db.VarChar(100) // grocery, judaica, bakery, butcher, etc.
  store_category       String?   @db.VarChar(100) // kosher, glatt, cholov yisroel, etc.
  business_hours       String?
  hours_parsed         Boolean   @default(false)
  timezone             String?   @db.VarChar(50)
  
  // Store features
  has_parking          Boolean   @default(false)
  has_delivery         Boolean   @default(false)
  has_pickup           Boolean   @default(false)
  accepts_credit_cards Boolean   @default(true)
  accepts_cash         Boolean   @default(true)
  
  // Kosher information
  kosher_certification String?   @db.VarChar(255)
  kosher_category      String?   @db.VarChar(100) // glatt, cholov yisroel, pas yisroel, etc.
  is_cholov_yisroel    Boolean   @default(false)
  is_pas_yisroel       Boolean   @default(false)
  
  // Ratings and reviews
  rating               Decimal?  @db.Decimal(3, 2)
  review_count         Int       @default(0)
  star_rating          Decimal?  @db.Decimal(3, 2)
  google_rating        Decimal?  @db.Decimal(3, 2)
  
  // Images and media
  image_url            String?   @db.VarChar(2000)
  logo_url             String?   @db.VarChar(2000)
  
  // Status and metadata
  is_active            Boolean   @default(true)
  is_verified          Boolean   @default(false)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  
  // Search and filtering
  tags                 String[]
  admin_notes          String?
  specials             String?
  listing_type         String?   @db.VarChar(100) @default("store")

  @@map("stores")
  @@schema("public")
}

/// Jewish mikvah facilities
model Mikvah {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  description          String?
  address              String?   @db.VarChar(500)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zip_code             String?   @db.VarChar(20)
  country              String?   @db.VarChar(50) @default("USA")
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  phone_number         String?   @db.VarChar(50)
  website              String?   @db.VarChar(500)
  email                String?   @db.VarChar(255)
  
  // Mikvah specific fields
  mikvah_type          String?   @db.VarChar(100) // women, men, community, private, etc.
  mikvah_category      String?   @db.VarChar(100) // orthodox, conservative, reform, etc.
  business_hours       String?
  hours_parsed         Boolean   @default(false)
  timezone             String?   @db.VarChar(50)
  
  // Mikvah features and services
  has_parking          Boolean   @default(false)
  has_disabled_access  Boolean   @default(false)
  has_heating          Boolean   @default(true)
  has_air_conditioning Boolean   @default(true)
  has_private_changing_rooms Boolean @default(true)
  has_amenities        Boolean   @default(false)
  
  // Kosher information
  kosher_certification String?   @db.VarChar(255)
  kosher_category      String?   @db.VarChar(100) // glatt, cholov yisroel, etc.
  is_cholov_yisroel    Boolean   @default(false)
  is_pas_yisroel       Boolean   @default(false)
  
  // Mikvah specific services
  has_attendant        Boolean   @default(true)
  has_private_sessions Boolean   @default(false)
  has_group_sessions   Boolean   @default(false)
  has_educational_programs Boolean @default(false)
  
  // Pricing and fees
  has_fees             Boolean   @default(false)
  fee_amount           Decimal?  @db.Decimal(10, 2)
  fee_currency         String?   @db.VarChar(3) @default("USD")
  accepts_credit_cards Boolean   @default(true)
  accepts_cash         Boolean   @default(true)
  
  // Ratings and reviews
  rating               Decimal?  @db.Decimal(3, 2)
  review_count         Int       @default(0)
  star_rating          Decimal?  @db.Decimal(3, 2)
  google_rating        Decimal?  @db.Decimal(3, 2)
  
  // Images and media
  image_url            String?   @db.VarChar(2000)
  logo_url             String?   @db.VarChar(2000)
  
  // Status and metadata
  is_active            Boolean   @default(true)
  is_verified          Boolean   @default(false)
  created_at           DateTime  @default(now()) @db.Timestamp(6)
  updated_at           DateTime  @default(now()) @db.Timestamp(6)
  
  // Search and filtering
  tags                 String[]
  admin_notes          String?
  specials             String?
  listing_type         String?   @db.VarChar(100) @default("mikvah")

  @@map("mikvah")
  @@schema("public")
}
